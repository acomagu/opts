package main

import (
	"errors"
	"html/template"
	"io"
	"regexp"
	"strings"

	"github.com/fatih/camelcase"
)

var headTmpl = template.Must(template.New("head").Parse(`
// Code generated by opts. DO NOT EDIT.

package {{.PkgName}}

type Opt interface {
	set(interface{})
}
`))

type headTmplData struct {
	PkgName string
}

func writeHeadTmpl(w io.Writer, pkgName string) error {
	data := &headTmplData{
		PkgName: pkgName,
	}

	if err := headTmpl.Execute(w, data); err != nil {
		return err
	}

	return nil
}

var tmpl = template.Must(template.New("opt").Parse(`
// {{.Name}}
type {{.LowerName}}Setter interface {
	set{{.Name}}({{.Type}})
}

type {{.LowerName}}Param struct {
	with{{.Name}} bool
	{{.LowerName}}     {{.Type}}
}

func (p *{{.LowerName}}Param) set{{.Name}}(v {{.Type}}) {
	p.with{{.Name}} = true
	p.{{.LowerName}} = v
}

type {{.LowerName}}Opt struct {
	v {{.Type}}
}

func {{.Name}}(v {{.Type}}) *{{.LowerName}}Opt {
	return &{{.LowerName}}Opt{
		v: v,
	}
}

func (o *{{.LowerName}}Opt) set(p interface{}) {
	p.({{.LowerName}}Setter).set{{.Name}}(o.v)
}
`))

type tmplData struct {
	Type      string
	Name      string
	LowerName string
}

var typeNameRegexp = regexp.MustCompile(`^\*?\S+$`)
var optNameRegexp = regexp.MustCompile(`^[A-Z]\S+$`)

func newTmplData(typName, name string) (*tmplData, error) {
	if !typeNameRegexp.MatchString(typName) {
		return nil, errors.New("invalid type name")
	}

	if !optNameRegexp.MatchString(name) {
		return nil, errors.New("invalid opt name")
	}

	lowerName := lowerCamelCase(name)

	return &tmplData{
		Type:      typName,
		Name:      name,
		LowerName: lowerName,
	}, nil
}

func lowerCamelCase(s string) string {
	es := camelcase.Split(s)
	es[0] = strings.ToLower(es[0])
	return strings.Join(es, "")
}

func writeTmpl(w io.Writer, typName, name string) error {
	data, err := newTmplData(typName, name)
	if err != nil {
		return err
	}

	return tmpl.Execute(w, data)
}
