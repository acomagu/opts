// Code generated by opts. DO NOT EDIT.

package main

import "time"

type Opt interface {
	set(interface{})
}

// Year
type yearSetter interface {
	setYear(int)
}

type yearParam struct {
	withYear bool
	year     int
}

func (p *yearParam) setYear(v int) {
	p.withYear = true
	p.year = v
}

type yearOpt struct {
	v int
}

func Year(v int) *yearOpt {
	return &yearOpt{
		v: v,
	}
}

func (o *yearOpt) set(p interface{}) {
	p.(yearSetter).setYear(o.v)
}

// Month
type monthSetter interface {
	setMonth(time.Month)
}

type monthParam struct {
	withMonth bool
	month     time.Month
}

func (p *monthParam) setMonth(v time.Month) {
	p.withMonth = true
	p.month = v
}

type monthOpt struct {
	v time.Month
}

func Month(v time.Month) *monthOpt {
	return &monthOpt{
		v: v,
	}
}

func (o *monthOpt) set(p interface{}) {
	p.(monthSetter).setMonth(o.v)
}

// Day
type daySetter interface {
	setDay(int)
}

type dayParam struct {
	withDay bool
	day     int
}

func (p *dayParam) setDay(v int) {
	p.withDay = true
	p.day = v
}

type dayOpt struct {
	v int
}

func Day(v int) *dayOpt {
	return &dayOpt{
		v: v,
	}
}

func (o *dayOpt) set(p interface{}) {
	p.(daySetter).setDay(o.v)
}

// Hour
type hourSetter interface {
	setHour(int)
}

type hourParam struct {
	withHour bool
	hour     int
}

func (p *hourParam) setHour(v int) {
	p.withHour = true
	p.hour = v
}

type hourOpt struct {
	v int
}

func Hour(v int) *hourOpt {
	return &hourOpt{
		v: v,
	}
}

func (o *hourOpt) set(p interface{}) {
	p.(hourSetter).setHour(o.v)
}

// Min
type minSetter interface {
	setMin(int)
}

type minParam struct {
	withMin bool
	min     int
}

func (p *minParam) setMin(v int) {
	p.withMin = true
	p.min = v
}

type minOpt struct {
	v int
}

func Min(v int) *minOpt {
	return &minOpt{
		v: v,
	}
}

func (o *minOpt) set(p interface{}) {
	p.(minSetter).setMin(o.v)
}

// Sec
type secSetter interface {
	setSec(int)
}

type secParam struct {
	withSec bool
	sec     int
}

func (p *secParam) setSec(v int) {
	p.withSec = true
	p.sec = v
}

type secOpt struct {
	v int
}

func Sec(v int) *secOpt {
	return &secOpt{
		v: v,
	}
}

func (o *secOpt) set(p interface{}) {
	p.(secSetter).setSec(o.v)
}

// NSec
type nSecSetter interface {
	setNSec(int)
}

type nSecParam struct {
	withNSec bool
	nSec     int
}

func (p *nSecParam) setNSec(v int) {
	p.withNSec = true
	p.nSec = v
}

type nSecOpt struct {
	v int
}

func NSec(v int) *nSecOpt {
	return &nSecOpt{
		v: v,
	}
}

func (o *nSecOpt) set(p interface{}) {
	p.(nSecSetter).setNSec(o.v)
}
